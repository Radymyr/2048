{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ function $3d28d7f1aac198f5$var$copyState(state) {\n    return state.map(function(row) {\n        return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n    });\n}\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        this.button = document.querySelector(\".button.start\");\n        this.gameScore = document.querySelector(\".game-score\");\n        this.messageStart = document.querySelector(\".message-start\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.isStopGenerateCells = false;\n        this.initialState = $3d28d7f1aac198f5$var$copyState(initialState);\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"checkVictory\",\n            value: function checkVictory() {\n                var isVictory = !!this.initialState.flat().find(function(item) {\n                    return item === 2048;\n                });\n                if (isVictory && this.messageWin && this.button) {\n                    this.status = \"win\";\n                    this.messageWin.classList.remove(\"hidden\");\n                    this.button.classList.remove(\"start\");\n                    this.button.classList.add(\"restart\");\n                    this.button.innerHTML = \"Restart\";\n                }\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                // eslint-disable-next-line max-len\n                var isFull = this.initialState.every(function(row) {\n                    return(// eslint-disable-next-line\n                    row.every(function(cell) {\n                        return cell !== 0;\n                    }));\n                });\n                if (!isFull) return;\n                for(var row = 0; row < this.size; row++)for(var col = 0; col < this.size; col++){\n                    // eslint-disable-next-line max-len\n                    if (col < this.size - 1 && this.initialState[row][col] === this.initialState[row][col + 1]) return;\n                    // eslint-disable-next-line max-len\n                    if (row < this.size - 1 && this.initialState[row][col] === this.initialState[row + 1][col]) return;\n                }\n                this.status = \"lose\";\n                // eslint-disable-next-line max-len\n                if (this.messageLose) this.messageLose.classList.remove(\"hidden\");\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (!this.isStatusPlaying()) return;\n                var isUpdated = false;\n                for(var row = 0; row < this.size; row++){\n                    for(var col = 0; col < this.size; col++)// eslint-disable-next-line max-len\n                    for(var innerColumn = col + 1; innerColumn < this.size; innerColumn++){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[row][innerColumn];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[row][innerColumn] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[row][innerColumn] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) continue;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    if (!this.isStopGenerateCells) this.transposeState();\n                    this.checkVictory();\n                    this.checkLose();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (!this.isStatusPlaying()) return;\n                this.changeTextButton();\n                var isUpdated = false;\n                for(var row = 0; row < this.size; row++){\n                    for(var col = this.size - 1; col >= 0; col--)for(var innerColumn = col - 1; innerColumn >= 0; innerColumn--){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[row][innerColumn];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[row][innerColumn] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[row][innerColumn] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) break;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    if (!this.isStopGenerateCells) this.transposeState();\n                    this.checkVictory();\n                    this.checkLose();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (!this.isStatusPlaying()) return;\n                this.changeTextButton();\n                var isUpdated = false;\n                for(var col = 0; col < this.size; col++){\n                    for(var row = 0; row < this.size; row++)for(var innerRow = row + 1; innerRow < this.size; innerRow++){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[innerRow][col];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[innerRow][col] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[innerRow][col] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) continue;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    if (!this.isStopGenerateCells) this.transposeState();\n                    this.checkVictory();\n                    this.checkLose();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (!this.isStatusPlaying()) return;\n                this.changeTextButton();\n                var isUpdated = false;\n                for(var col = 0; col < this.size; col++){\n                    for(var row = this.size - 1; row >= 0; row--)for(var innerRow = row - 1; innerRow >= 0; innerRow--){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[innerRow][col];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[innerRow][col] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[innerRow][col] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) continue;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    if (!this.isStopGenerateCells) this.transposeState();\n                    this.checkVictory();\n                    this.checkLose();\n                }\n            }\n        },\n        {\n            key: \"changeTextButton\",\n            value: function changeTextButton() {\n                if (this.button) {\n                    this.button.classList.remove(\"start\");\n                    this.button.classList.add(\"restart\");\n                    this.button.innerHTML = \"Restart\";\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"isStatusPlaying\",\n            value: function isStatusPlaying() {\n                return this.status === \"playing\";\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.initialState;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status === \"playing\") return;\n                this.transposeState();\n                this.transposeState();\n                this.status = \"playing\";\n                if (this.messageStart) this.messageStart.classList.add(\"hidden\");\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.initialState = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.status = \"idle\";\n                this.score = 0;\n                if (this.button) {\n                    this.button.classList.remove(\"restart\");\n                    this.button.classList.add(\"start\");\n                    this.button.innerHTML = \"Start\";\n                    this.messageWin.classList.add(\"hidden\");\n                }\n                if (this.gameScore) this.gameScore.innerHTML = \"0\";\n                if (this.messageStart) this.messageStart.classList.remove(\"hidden\");\n                if (this.messageLose) this.messageLose.classList.add(\"hidden\");\n            }\n        },\n        {\n            key: \"generateNewNumber\",\n            value: function generateNewNumber() {\n                return Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"transposeState\",\n            value: function transposeState() {\n                var emptyCells = [];\n                for(var row = 0; row < this.size; row++){\n                    for(var col = 0; col < this.size; col++)if (this.initialState[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], row1 = _emptyCells_randomIndex.row, col1 = _emptyCells_randomIndex.col;\n                    this.initialState[row1][col1] = this.generateNewNumber();\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nwindow.game = $197cd56b15c33885$var$game;\n$197cd56b15c33885$var$rerenderGrid();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    var isRestart = $197cd56b15c33885$var$game.button.innerHTML === \"Restart\";\n    if (isRestart) {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$rerenderGrid();\n    } else {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$rerenderGrid();\n    }\n});\ndocument.addEventListener(\"keydown\", function(param) {\n    var key = param.key;\n    if (key === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n    if (key === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n    if (key === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n    if (key === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n    var scoreElement = document.querySelector(\".game-score\");\n    if (scoreElement) scoreElement.innerText = $197cd56b15c33885$var$game.getScore();\n    $197cd56b15c33885$var$rerenderGrid();\n});\nfunction $197cd56b15c33885$var$rerenderGrid() {\n    $197cd56b15c33885$var$game.getState().forEach(function(row, index) {\n        row.forEach(function(value, innerIndex) {\n            // eslint-disable-next-line max-len\n            var element = document.querySelectorAll(\".field-row\")[index].children[innerIndex];\n            if (value !== 0) element.innerText = value;\n            else element.innerText = \"\";\n            element.className = \"\";\n            element.classList.add(\"field-cell\", \"field-cell--\".concat(value));\n        });\n    });\n}\n\n})();\n//# sourceMappingURL=index.c4b675b6.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nwindow.game = game;\nrerenderGrid();\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', () => {\n  const isRestart = game.button.innerHTML === 'Restart';\n\n  if (isRestart) {\n    game.restart();\n    rerenderGrid();\n  } else {\n    game.start();\n    rerenderGrid();\n  }\n});\n\ndocument.addEventListener('keydown', ({ key }) => {\n  if (key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  const scoreElement = document.querySelector('.game-score');\n\n  if (scoreElement) {\n    scoreElement.innerText = game.getScore();\n  }\n  rerenderGrid();\n});\n\nfunction rerenderGrid() {\n  game.getState().forEach((row, index) => {\n    row.forEach((value, innerIndex) => {\n      // eslint-disable-next-line max-len\n      const element\n        = document.querySelectorAll('.field-row')[index].children[innerIndex];\n\n      if (value !== 0) {\n        element.innerText = value;\n      } else {\n        element.innerText = '';\n      }\n      element.className = '';\n      element.classList.add('field-cell', `field-cell--${value}`);\n    });\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nfunction copyState(state) {\n  return state.map((row) => [...row]);\n}\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n    this.button = document.querySelector('.button.start');\n    this.gameScore = document.querySelector('.game-score');\n    this.messageStart = document.querySelector('.message-start');\n    this.messageLose = document.querySelector('.message-lose');\n    this.messageWin = document.querySelector('.message-win');\n    this.isStopGenerateCells = false;\n\n    this.initialState = copyState(initialState);\n  }\n\n  checkVictory() {\n    const isVictory = !!this.initialState.flat().find((item) => item === 2048);\n\n    if (isVictory && this.messageWin && this.button) {\n      this.status = 'win';\n      this.messageWin.classList.remove('hidden');\n      this.button.classList.remove('start');\n      this.button.classList.add('restart');\n      this.button.innerHTML = 'Restart';\n    }\n  }\n\n  checkLose() {\n    // eslint-disable-next-line max-len\n    const isFull = this.initialState.every((row) =>\n      // eslint-disable-next-line\n      row.every((cell) => cell !== 0),);\n\n    if (!isFull) {\n      return;\n    }\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // eslint-disable-next-line max-len\n        if (\n          col < this.size - 1\n          && this.initialState[row][col] === this.initialState[row][col + 1]\n        ) {\n          return;\n        }\n\n        // eslint-disable-next-line max-len\n        if (\n          row < this.size - 1\n          && this.initialState[row][col] === this.initialState[row + 1][col]\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n\n    // eslint-disable-next-line max-len\n    if (this.messageLose) {\n      this.messageLose.classList.remove('hidden');\n    }\n  }\n\n  moveLeft() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n\n    let isUpdated = false;\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // eslint-disable-next-line max-len\n        for (\n          let innerColumn = col + 1;\n          innerColumn < this.size;\n          innerColumn++\n        ) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  moveRight() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    this.changeTextButton();\n\n    let isUpdated = false;\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = this.size - 1; col >= 0; col--) {\n        for (let innerColumn = col - 1; innerColumn >= 0; innerColumn--) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  moveUp() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    this.changeTextButton();\n\n    let isUpdated = false;\n\n    for (let col = 0; col < this.size; col++) {\n      for (let row = 0; row < this.size; row++) {\n        for (let innerRow = row + 1; innerRow < this.size; innerRow++) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  moveDown() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    this.changeTextButton();\n\n    let isUpdated = false;\n\n    for (let col = 0; col < this.size; col++) {\n      for (let row = this.size - 1; row >= 0; row--) {\n        for (let innerRow = row - 1; innerRow >= 0; innerRow--) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  changeTextButton() {\n    if (this.button) {\n      this.button.classList.remove('start');\n      this.button.classList.add('restart');\n      this.button.innerHTML = 'Restart';\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  isStatusPlaying() {\n    return this.status === 'playing';\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'playing') {\n      return;\n    }\n    this.transposeState();\n    this.transposeState();\n    this.status = 'playing';\n\n    if (this.messageStart) {\n      this.messageStart.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.status = 'idle';\n    this.score = 0;\n\n    if (this.button) {\n      this.button.classList.remove('restart');\n      this.button.classList.add('start');\n      this.button.innerHTML = 'Start';\n      this.messageWin.classList.add('hidden');\n    }\n\n    if (this.gameScore) {\n      this.gameScore.innerHTML = '0';\n    }\n\n    if (this.messageStart) {\n      this.messageStart.classList.remove('hidden');\n    }\n\n    if (this.messageLose) {\n      this.messageLose.classList.add('hidden');\n    }\n  }\n\n  generateNewNumber() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  transposeState() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.initialState[row][col] === 0) {\n          emptyCells.push({\n            row,\n            col,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.initialState[row][col] = this.generateNewNumber();\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","size","score","status","button","document","querySelector","gameScore","messageStart","messageLose","messageWin","isStopGenerateCells","state","map","row","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","key","value","flat","find","item","classList","remove","add","innerHTML","every","cell","col","isStatusPlaying","isUpdated","innerColumn","currentItem","nextItem","mergedValue","transposeState","checkVictory","checkLose","changeTextButton","innerRow","Math","random","emptyCells","push","randomIndex","floor","_emptyCells_randomIndex","row1","col1","generateNewNumber","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$rerenderGrid","getState","forEach","index","innerIndex","element","querySelectorAll","children","innerText","className","concat","window","game","$197cd56b15c33885$var$startButton","addEventListener","restart","start","param","moveLeft","moveRight","moveUp","moveDown","scoreElement","getScore"],"version":3,"file":"index.c4b675b6.js.map"}