{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ function $a5fd07fa01589658$var$copyState(state) {\n    return state.map((row)=>[\n            ...row\n        ]);\n}\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        this.button = document.querySelector(\".button.start\");\n        this.gameScore = document.querySelector(\".game-score\");\n        this.messageStart = document.querySelector(\".message-start\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.isStopGenerateCells = false;\n        this.initialState = $a5fd07fa01589658$var$copyState(initialState);\n    }\n    checkVictory() {\n        const isVictory = !!this.initialState.flat().find((item)=>item === 2048);\n        if (isVictory && this.messageWin && this.button) {\n            this.status = \"win\";\n            this.messageWin.classList.remove(\"hidden\");\n            this.button.classList.remove(\"start\");\n            this.button.classList.add(\"restart\");\n            this.button.innerHTML = \"Restart\";\n        }\n    }\n    checkLose() {\n        // eslint-disable-next-line max-len\n        const isFull = this.initialState.every((row)=>// eslint-disable-next-line\n            row.every((cell)=>cell !== 0));\n        if (!isFull) return;\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            // eslint-disable-next-line max-len\n            if (col < this.size - 1 && this.initialState[row][col] === this.initialState[row][col + 1]) return;\n            // eslint-disable-next-line max-len\n            if (row < this.size - 1 && this.initialState[row][col] === this.initialState[row + 1][col]) return;\n        }\n        this.status = \"lose\";\n        // eslint-disable-next-line max-len\n        if (this.messageLose) this.messageLose.classList.remove(\"hidden\");\n    }\n    moveLeft() {\n        if (!this.isStatusPlaying()) return;\n        let isUpdated = false;\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)// eslint-disable-next-line max-len\n            for(let innerColumn = col + 1; innerColumn < this.size; innerColumn++){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[row][innerColumn];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[row][innerColumn] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[row][innerColumn] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) continue;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            if (!this.isStopGenerateCells) this.transposeState();\n            this.checkVictory();\n            this.checkLose();\n        }\n    }\n    moveRight() {\n        if (!this.isStatusPlaying()) return;\n        this.changeTextButton();\n        let isUpdated = false;\n        for(let row = 0; row < this.size; row++){\n            for(let col = this.size - 1; col >= 0; col--)for(let innerColumn = col - 1; innerColumn >= 0; innerColumn--){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[row][innerColumn];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[row][innerColumn] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[row][innerColumn] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) break;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            if (!this.isStopGenerateCells) this.transposeState();\n            this.checkVictory();\n            this.checkLose();\n        }\n    }\n    moveUp() {\n        if (!this.isStatusPlaying()) return;\n        this.changeTextButton();\n        let isUpdated = false;\n        for(let col = 0; col < this.size; col++){\n            for(let row = 0; row < this.size; row++)for(let innerRow = row + 1; innerRow < this.size; innerRow++){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[innerRow][col];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[innerRow][col] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[innerRow][col] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) continue;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            if (!this.isStopGenerateCells) this.transposeState();\n            this.checkVictory();\n            this.checkLose();\n        }\n    }\n    moveDown() {\n        if (!this.isStatusPlaying()) return;\n        this.changeTextButton();\n        let isUpdated = false;\n        for(let col = 0; col < this.size; col++){\n            for(let row = this.size - 1; row >= 0; row--)for(let innerRow = row - 1; innerRow >= 0; innerRow--){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[innerRow][col];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[innerRow][col] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[innerRow][col] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) continue;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            if (!this.isStopGenerateCells) this.transposeState();\n            this.checkVictory();\n            this.checkLose();\n        }\n    }\n    changeTextButton() {\n        if (this.button) {\n            this.button.classList.remove(\"start\");\n            this.button.classList.add(\"restart\");\n            this.button.innerHTML = \"Restart\";\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    isStatusPlaying() {\n        return this.status === \"playing\";\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.initialState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status === \"playing\") return;\n        this.transposeState();\n        this.transposeState();\n        this.status = \"playing\";\n        if (this.messageStart) this.messageStart.classList.add(\"hidden\");\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.status = \"idle\";\n        this.score = 0;\n        if (this.button) {\n            this.button.classList.remove(\"restart\");\n            this.button.classList.add(\"start\");\n            this.button.innerHTML = \"Start\";\n            this.messageWin.classList.add(\"hidden\");\n        }\n        if (this.gameScore) this.gameScore.innerHTML = \"0\";\n        if (this.messageStart) this.messageStart.classList.remove(\"hidden\");\n        if (this.messageLose) this.messageLose.classList.add(\"hidden\");\n    }\n    generateNewNumber() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    transposeState() {\n        const emptyCells = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.initialState[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            this.initialState[row][col] = this.generateNewNumber();\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nwindow.game = $09e991522ca7e64e$var$game;\n$09e991522ca7e64e$var$rerenderGrid();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    const isRestart = $09e991522ca7e64e$var$game.button.innerHTML === \"Restart\";\n    if (isRestart) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$rerenderGrid();\n    } else {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$rerenderGrid();\n    }\n});\ndocument.addEventListener(\"keydown\", ({ key: key })=>{\n    if (key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    const scoreElement = document.querySelector(\".game-score\");\n    if (scoreElement) scoreElement.innerText = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$rerenderGrid();\n});\nfunction $09e991522ca7e64e$var$rerenderGrid() {\n    $09e991522ca7e64e$var$game.getState().forEach((row, index)=>{\n        row.forEach((value, innerIndex)=>{\n            // eslint-disable-next-line max-len\n            const element = document.querySelectorAll(\".field-row\")[index].children[innerIndex];\n            if (value !== 0) element.innerText = value;\n            else element.innerText = \"\";\n            element.className = \"\";\n            element.classList.add(\"field-cell\", `field-cell--${value}`);\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.fe8ccd05.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nwindow.game = game;\nrerenderGrid();\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', () => {\n  const isRestart = game.button.innerHTML === 'Restart';\n\n  if (isRestart) {\n    game.restart();\n    rerenderGrid();\n  } else {\n    game.start();\n    rerenderGrid();\n  }\n});\n\ndocument.addEventListener('keydown', ({ key }) => {\n  if (key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  const scoreElement = document.querySelector('.game-score');\n\n  if (scoreElement) {\n    scoreElement.innerText = game.getScore();\n  }\n  rerenderGrid();\n});\n\nfunction rerenderGrid() {\n  game.getState().forEach((row, index) => {\n    row.forEach((value, innerIndex) => {\n      // eslint-disable-next-line max-len\n      const element\n        = document.querySelectorAll('.field-row')[index].children[innerIndex];\n\n      if (value !== 0) {\n        element.innerText = value;\n      } else {\n        element.innerText = '';\n      }\n      element.className = '';\n      element.classList.add('field-cell', `field-cell--${value}`);\n    });\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nfunction copyState(state) {\n  return state.map((row) => [...row]);\n}\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n    this.button = document.querySelector('.button.start');\n    this.gameScore = document.querySelector('.game-score');\n    this.messageStart = document.querySelector('.message-start');\n    this.messageLose = document.querySelector('.message-lose');\n    this.messageWin = document.querySelector('.message-win');\n    this.isStopGenerateCells = false;\n\n    this.initialState = copyState(initialState);\n  }\n\n  checkVictory() {\n    const isVictory = !!this.initialState.flat().find((item) => item === 2048);\n\n    if (isVictory && this.messageWin && this.button) {\n      this.status = 'win';\n      this.messageWin.classList.remove('hidden');\n      this.button.classList.remove('start');\n      this.button.classList.add('restart');\n      this.button.innerHTML = 'Restart';\n    }\n  }\n\n  checkLose() {\n    // eslint-disable-next-line max-len\n    const isFull = this.initialState.every((row) =>\n      // eslint-disable-next-line\n      row.every((cell) => cell !== 0),);\n\n    if (!isFull) {\n      return;\n    }\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // eslint-disable-next-line max-len\n        if (\n          col < this.size - 1\n          && this.initialState[row][col] === this.initialState[row][col + 1]\n        ) {\n          return;\n        }\n\n        // eslint-disable-next-line max-len\n        if (\n          row < this.size - 1\n          && this.initialState[row][col] === this.initialState[row + 1][col]\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n\n    // eslint-disable-next-line max-len\n    if (this.messageLose) {\n      this.messageLose.classList.remove('hidden');\n    }\n  }\n\n  moveLeft() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n\n    let isUpdated = false;\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // eslint-disable-next-line max-len\n        for (\n          let innerColumn = col + 1;\n          innerColumn < this.size;\n          innerColumn++\n        ) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  moveRight() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    this.changeTextButton();\n\n    let isUpdated = false;\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = this.size - 1; col >= 0; col--) {\n        for (let innerColumn = col - 1; innerColumn >= 0; innerColumn--) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  moveUp() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    this.changeTextButton();\n\n    let isUpdated = false;\n\n    for (let col = 0; col < this.size; col++) {\n      for (let row = 0; row < this.size; row++) {\n        for (let innerRow = row + 1; innerRow < this.size; innerRow++) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  moveDown() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    this.changeTextButton();\n\n    let isUpdated = false;\n\n    for (let col = 0; col < this.size; col++) {\n      for (let row = this.size - 1; row >= 0; row--) {\n        for (let innerRow = row - 1; innerRow >= 0; innerRow--) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      if (!this.isStopGenerateCells) {\n        this.transposeState();\n      }\n      this.checkVictory();\n      this.checkLose();\n    }\n  }\n\n  changeTextButton() {\n    if (this.button) {\n      this.button.classList.remove('start');\n      this.button.classList.add('restart');\n      this.button.innerHTML = 'Restart';\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  isStatusPlaying() {\n    return this.status === 'playing';\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'playing') {\n      return;\n    }\n    this.transposeState();\n    this.transposeState();\n    this.status = 'playing';\n\n    if (this.messageStart) {\n      this.messageStart.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.status = 'idle';\n    this.score = 0;\n\n    if (this.button) {\n      this.button.classList.remove('restart');\n      this.button.classList.add('start');\n      this.button.innerHTML = 'Start';\n      this.messageWin.classList.add('hidden');\n    }\n\n    if (this.gameScore) {\n      this.gameScore.innerHTML = '0';\n    }\n\n    if (this.messageStart) {\n      this.messageStart.classList.remove('hidden');\n    }\n\n    if (this.messageLose) {\n      this.messageLose.classList.add('hidden');\n    }\n  }\n\n  generateNewNumber() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  transposeState() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.initialState[row][col] === 0) {\n          emptyCells.push({\n            row,\n            col,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.initialState[row][col] = this.generateNewNumber();\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","button","document","querySelector","gameScore","messageStart","messageLose","messageWin","isStopGenerateCells","state","map","row","checkVictory","flat","find","item","classList","remove","add","innerHTML","checkLose","every","cell","col","moveLeft","isStatusPlaying","isUpdated","innerColumn","currentItem","nextItem","mergedValue","transposeState","moveRight","changeTextButton","moveUp","innerRow","moveDown","getScore","getState","getStatus","start","restart","generateNewNumber","Math","random","emptyCells","push","length","randomIndex","floor","$09e991522ca7e64e$var$rerenderGrid","forEach","index","value","innerIndex","element","querySelectorAll","children","innerText","className","window","game","$09e991522ca7e64e$var$startButton","addEventListener","key","scoreElement"],"version":3,"file":"index.fe8ccd05.js.map"}